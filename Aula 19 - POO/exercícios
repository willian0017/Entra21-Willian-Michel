

*Herança prototypal***

1) Analise o código abaixo e informe quais valores serão apresentados no processo
 
    let animal = {
        pula: null

    let coelho = {
        __proto__: animal,
        pula: true

    console.log(coelho.pula) // true
    delete coelho.pula
    console.log(coelho.pula) // null
    delete animal.pula
    console.log(coelho.pula) // undefined

2) Dado os seguintes objetos:

    let cabeca = {
    oculos: 1
    }
    let mesa = {
        caneta: 3,
        __proto__: cabeca
    }
    let cama = {
        lenco: 1,
        travesseiro: 2,
        __proto__: mesa
    }
    let bolso = {
        dinheiro: 200,
        __proto__: cama
    }
    console.log(bolso.caneta) 
    console.log(cama.oculos) 
    console.log(mesa.dinheiro)

3) Nesse problema temos dois hamster: Hamtaro e Fofuxo. Os dois herdam do objeto hamster.
Quando alimentamos um deles, o outro também fica cheio. Por que? Como consertar isso?
        
    let hamster = {
    estomago: [],
    comer(comida) {
    this.estomago.push(comida)
    }
    }
    let hamtaro = {
        __proto__: hamster
    }
    let fofuxo = {
        __proto__: hamster
    }
    hamtaro.comer("Maçã")
    console.log(hamtaro.estomago)
    console.log(fofuxo.estomago)



*Herança***

1) Corrija o script a seguir para que ele funcione
    class Animal {  
    constructor(nome) {
        this.nome = nome
    }            
    }
    class Coelho extends Animal {
        constructor(nome) {
            super(nome)
            this.criadoEm = Date.now()
        }
    }
    let coelho = new Coelho("Coelho Branco")
    alert(coelho.nome)

2) Crie uma subclasse de Relogio que adiciona o parametro de precisao 
(O numero em ms entre os ticks). 
        class Relogio {
            constructor(formato) {
                this.formato = formato
            }

            renderizar() {
                let data = new Date()

                let horas = data.getHours()
                if (horas < 10) horas = "0" + horas

                let minutos = data.getMinutes()
                if (minutos < 10) minutos = "0" + minutos

                let segundos = data.getSeconds()
                if (segundos < 10) segundos = "0" + segundos

                let resultado = this.formato
                    .replace("h", horas)
                    .replace("m", minutos)
                    .replace("s", segundos)
                
                console.log(resultado)
            }

            parar() {
                clearInterval(this.timer)
            }

            comecar() {
                this.renderizar()
                this.timer = setInterval(() => this.renderizar(), 1000)
            }
        }


        class RelogioTick extends Relogio {
            constructor(formato, ticker) {
                super(formato)
                this.ticker = ticker
            }

            comecar() {
                super.renderizar()
                this.ticker = setInterval(() => super.renderizar(), this.ticker)
            }
        }

        let timer1 = new RelogioTick("h:m:s", 5000)
        timer1.comecar()

3) Crie a classe Imovel, que possui um endereço e um preço.
    a. crie uma classe Novo, que herda Imovel e possui um adicional no preço. Crie
    métodos de acesso e impressão deste valor adicional.
    b. crie uma classe Velho, que herda Imovel e possui um desconto no preço. Crie
    métodos de acesso e impressão para este desconto.
    Ambas as classes Novo e Velho devem implementar um método calculaTotal() que informa
    o valor com o adicional ou com o desconto.

        let preco = 750000
        let endereco = "Florianópolis"
        let adicional = 15

        class Imovel {
            constructor(endereco, preco) {
                this.endereco = endereco
                this.preco = preco
            }
        }

        class Novo extends Imovel {
            #adicional
            constructor(endereco, preco, adicional) {
                super(endereco, preco)
                this.#adicional = adicional
            }

            get adicional() {
                return this.#adicional
            }

            set adicional(valorNovo) {
                this.#adicional = valorNovo
            }

            calculaTotal() {
                
                valorNovo = (preco + adicional) / 1.15


            }
        }

        console.log(preco, endereco)

4) Crie uma classe Animal que possua os seguintes atributos:
- nome
- comprimento
- numeroPatas
- cor
- ambiente
- velocidadeMedia

Essa classe deve possuir o método mostrarDados()
que mostra um relatório contendo as informações do Animal.

Crie uma classe Peixe que herda de animal e possua o atributo
caracteristica. Essa classe deve implementar o método mostrarDadoPeixe()
que mostra um relatório contendo as informações do Peixe.

Crie uma classe Mamifero que herda de animal e possua o atributo
alimento. Essa classe deve implementer o método mostrarDadosMamifero()
que mostra um relatório contendo as informações do Mamífero.

Após isso crie um objeto de cada classe e teste os métodos.


    
    